name: CI
on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, js]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip
        if: matrix.language == 'python'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black safety
      - name: Lint Python
        if: matrix.language == 'python'
        run: |
          black --check .
          flake8 .
      - name: Safety scan
        if: matrix.language == 'python'
        run: safety check
      - name: Set up Node.js
        if: matrix.language == 'js'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache npm
        if: matrix.language == 'js'
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: Install JS dependencies
        if: matrix.language == 'js'
        run: npm install
      - name: Lint JS
        if: matrix.language == 'js'
        run: npx eslint .
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: jeetsocial
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5433:5432
    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5433/jeetsocial
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ENABLE_RATE_LIMITING: true
      ENABLE_MODERATION: true
      FLASK_APP: app
      FLASK_ENV: development
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov safety
      - name: Safety scan
        run: safety check
      - name: Run Python tests with coverage
        run: pytest --cov=app --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}
      - name: Upload Python coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: Install JS dependencies
        run: npm install

      - name: Wait for DB to be ready
        run: |
          for i in {1..30}; do
            PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} pg_isready -h localhost -p 5433 -U ${{ secrets.POSTGRES_USER }} && break
            sleep 1
          done
      - name: Run DB migrations
        run: flask db upgrade
      - name: Start Flask app for E2E
        run: |
          flask run --host=0.0.0.0 --port=5000 &
          sleep 5
          bash wait-for-it.sh localhost:5000 --timeout=30
      - name: Run Playwright E2E tests
        run: |
          npx playwright install
          npm run e2e
      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
      - name: Enforce coverage threshold
        run: |
          pip install coverage
          coverage report --fail-under=80
          npx nyc check-coverage --lines 80 --functions 80 --branches 80 --statements 80
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker images
        run: docker compose build
      - name: Trivy scan
        uses: aquasecurity/trivy-action@v0.19.0
        with:
          image-ref: 'jeetsocial_web:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
