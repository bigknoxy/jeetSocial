name: CI
on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: jeetsocial
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 10
    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/jeetsocial
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ENABLE_RATE_LIMITING: true
      ENABLE_MODERATION: true
      FLASK_APP: app
      FLASK_ENV: development
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Python
        run: |
          black --check .
          flake8 .
      - name: Audit Python dependencies
        run: |
          pip-audit
      - name: Run Python tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing
      - name: Upload Python coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Install JS dependencies
        run: |
          npm install
      - name: Lint JS
        run: |
          npx eslint .
      - name: Audit JS dependencies
        run: |
          npm audit --audit-level=moderate
      - name: Run JS tests with coverage
        run: |
          npm run test:coverage
      - name: Upload JS coverage report
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage
          path: coverage/
      - name: Wait for DB to be ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 1
          done
      - name: Run DB migrations
        run: |
          . venv/bin/activate
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jeetsocial FLASK_APP=app flask db upgrade
      - name: Start Flask app for E2E
        run: |
          . venv/bin/activate
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jeetsocial FLASK_APP=app FLASK_ENV=development flask run --host=0.0.0.0 --port=5000 &
          sleep 5
      - name: Run Playwright E2E tests
        run: |
          npx playwright install
          npm run e2e
      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: test-results/
      - name: Build Docker images
        run: |
          docker compose build
      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: .pytest_cache/
      - name: Enforce coverage threshold
        run: |
          pip install coverage
          coverage report --fail-under=80
          npx nyc check-coverage --lines 80 --functions 80 --branches 80 --statements 80
