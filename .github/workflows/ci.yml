---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint (flake8)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [python, js]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install flake8

      - name: Run flake8
        run: flake8 .


  test:
    name: Tests (pytest)
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jeet_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Use the Postgres service credentials and default service port
      PYTHONPATH: ${{ github.workspace }}
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jeet_test
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ENABLE_RATE_LIMITING: 'true'
      ENABLE_MODERATION: 'true'
      FLASK_APP: app:create_app
      FLASK_ENV: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Wait for Postgres
        run: |
          for i in $(seq 1 30); do
            (echo > /dev/tcp/localhost/5432) >/dev/null 2>&1 && echo "Postgres ready" && break
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run migrations (if present)
        run: |
          if [ -d "migrations" ]; then
            pip install Flask-Migrate
            # Run migrations using Flask-Migrate under the app context
            export FLASK_APP=app:create_app
            flask db upgrade
          fi

      - name: Run tests with coverage
        run: pytest --cov=app --cov-report=xml -q

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  pip-audit:
    name: Pip Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run pip-audit on requirements-runtime.txt
        run: |
          pip-audit --requirement requirements-runtime.txt --severity HIGH,CRITICAL --desc on --format json -o pip-audit-report.json || true
          echo "=== pip-audit JSON report (if created) ==="
          if [ -f pip-audit-report.json ]; then
            cat pip-audit-report.json
          fi

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report-${{ github.run_id }}.json
          path: pip-audit-report.json


 
  docker-build:
    name: Docker build (main only)
    runs-on: ubuntu-latest
    needs: pip-audit
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - uses: actions/checkout@v3
 
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: jeetsocial_web:latest
 
      - name: Trivy scan (moved to trivy-scan job)
        run: echo "Trivy scan moved to trivy-scan job"
 
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Run Trivy fs scan (JSON output)
        run: |
          echo "Running Trivy filesystem scan to produce JSON report"
          docker run --rm -v ${{ github.workspace }}:/workspace aquasec/trivy:latest fs --format json -o trivy-fs-report.json /workspace
 
      - name: Upload Trivy fs JSON report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report-${{ github.run_id }}.json
          path: trivy-fs-report.json
 
      - name: Trivy fs enforcement (fail on HIGH/CRITICAL)
        run: |
          echo "Running Trivy fs enforcement: fail on HIGH/CRITICAL"
          docker run --rm -v ${{ github.workspace }}:/workspace aquasec/trivy:latest fs --severity HIGH,CRITICAL --ignore-unfixed --exit-code 1 /workspace
 
      - name: Pull built image for scan
        run: |
          echo "Ensuring image is present locally"
          docker images || true
 
      - name: Run Trivy image scan (JSON output)
        run: |
          echo "Running Trivy image scan to produce JSON report"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --format json -o trivy-report.json jeetsocial_web:latest || true
 
      - name: Upload Trivy image JSON report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.run_id }}.json
          path: trivy-report.json
 
      - name: Trivy enforcement (fail on HIGH/CRITICAL)
        run: |
          echo "Running Trivy enforcement: fail on HIGH/CRITICAL for image"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL --ignore-unfixed --exit-code 1 jeetsocial_web:latest


  deploy:
    needs: [lint, test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    steps:
      - name: Manual approval
        uses: fjogeleit/manual-approval-action@v1.2
        with:
          approvers: bigknoxy
          issueTitle: "Deploy to Production"
          issueBody: "Approve deployment to production."
      - name: Download Python coverage report
        uses: actions/download-artifact@v4
        with:
          name: python-coverage
          path: coverage/
      - name: Download Playwright results
        uses: actions/download-artifact@v4
        with:
          name: playwright-results
          path: test-results/
      - name: Deploy (placeholder)
        run: echo "Deploying to production..."
      - name: Notify on deploy
        uses: rjstone/discord-webhook-notify@v1
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: info
          details: "jeetSocial deployed to production by ${{ github.actor }}."
